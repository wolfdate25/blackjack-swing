package project.blackjack;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;

public class Connect extends JFrame {
    public JPanel rootPanel;
    private JTextField portField;
    private JButton connectButton;
    private JTextField addressField;

    public Connect() {
        setTitle("Login");
        setContentPane(rootPanel);
        pack();
        setVisible(true);
        connectButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                try {
                    String address = addressField.getText();
                    int port = Integer.parseInt(portField.getText());
                    if (address.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "서버 주소를 입력해야 합니다.");
                    } else if (port == 0) {
                        JOptionPane.showMessageDialog(null, "포트를 입력해야 합니다.");
                    } else {
                        try {
//                            loginServer(username, password);
//                            Packet packet = (Packet) ois.readObject();
//                            if (packet.name.equals("true")) { // 로그인 성공
//                                Player player = new Player(username);
//                                player.setCoin(Integer.parseInt(packet.action));
                            GameThread thread = new GameThread(address, port);
                            thread.start();

                            dispose();
//                            } else { // 로그인 실패
//                                JOptionPane.showMessageDialog(null, "해당 계정 정보가 잘못되었거나 서버에 등록되어 있지 않습니다.");
                        } catch (IOException ioe) {
                            JOptionPane.showMessageDialog(null, "서버와의 연결에 실패했습니다.");

                        }
//                        } catch (IOException unknownHostException) {
//                            JOptionPane.showMessageDialog(null, "서버와의 연결에 실패했습니다.");
//                        } catch (ClassNotFoundException classNotFoundException) {
//                            classNotFoundException.printStackTrace();
//                        }
                    }
                } catch (NullPointerException npe) {
                    JOptionPane.showMessageDialog(null, "접속하기 위한 올바른 정보를 입력해야 합니다.");

                }

            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(5, 1, new Insets(50, 50, 50, 50), -1, -1));
        portField = new JTextField();
        portField.setText("30000");
        rootPanel.add(portField, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setFocusable(false);
        label1.setHorizontalAlignment(0);
        label1.setText("Address");
        rootPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setFocusable(false);
        label2.setHorizontalAlignment(0);
        label2.setText("Port");
        rootPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addressField = new JTextField();
        addressField.setText("127.0.0.1");
        rootPanel.add(addressField, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        connectButton = new JButton();
        connectButton.setText("Connect");
        rootPanel.add(connectButton, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }
}